#! /usr/bin/env bash

function check_variables_are_set() {
  while [ $# -gt 0 ]; do
    if [[ ! -v "$1" ]]; then
      return 1
    fi
    shift
  done
}

function unset_variables() {
  while [ $# -gt 0 ]; do
    unset $1
    shift
  done
}

[ -f path.sh ] && . path.sh

echo "$0 $*"

device=
torch_dir_mixin=
help_message="Decode and score an acoustic model from an experiment matrix

Usage: $0 [options] (<trial-dir> | <matrix-file> <line>)
e.g.: $0 exp/matrix 1

This script wraps 'acoustic-model-forward-pdfs' and scoring (error rates) for
easy use with an experiment matrix generated by stepsext/generate_matrix.sh

Where <trial-dir> is a directory generated by stepsext/generate_matrix.sh and
contains a file called 'variables'.

Alternatively, <matrix-file> is the matrix file generated by
stepsext/generate_matrix.sh and <line> is a natural number that indexes
a line in <matrix-file> that lists <trial-dir>.

Options:
--device <STR>                 : A torch device string, such as 'cpu' or
                                 'cuda:1'. If unset, 'cuda' will be used if
                                 pytorch can access a GPU, otherwise 'cpu'
--torch-dir-mixin PATH         : To decode using a different feature set. This
                                 only impacts the features used. The topology,
                                 words, etc, remain the same
"

. parse_options.sh

if [ $# != 1 ] && [ $# != 2 ]; then
  echo "${help_message}" | grep "Usage" 1>&2
  echo "$0 --help for more info" 1>&2
  exit 1
fi

set -e

if [ $# = 1 ]; then
  trial_dir="$1"
else
  trial_dir="$(sed "${2}q;d" "$1")"
fi

if [ ! -z "${torch_dir_mixin}" ]; then
  if [ ! -f "${torch_dir_mixin}/variables" ]; then
    echo "No file '${torch_dir_mixin}/variables'" 1>&2
    exit 1
  fi
  data_dir_vars=(
    "freq_dim"
    "target_dim"
    "HCLG"
    "gmm_mdl"
    "words"
    "log_prior"
    "train_data"
    "dev_data"
    "test_data"
    "dev_ref"
    "test_ref"
  )
  unset_variables "${data_dir_vars[@]}"
  . "${torch_dir_mixin}/variables"
  check_variables_are_set "${data_dir_vars[@]}"
  dev_data_mixin="${dev_data}"
  test_data_mixin="${test_data}"
  freq_dim_mixin="${freq_dim}"
fi

if [ ! -f "${trial_dir}/variables" ]; then
  echo "No file '${trial_dir}/variables'" 1>&2
  exit 1
fi

trial_dir_vars=(
  "freq_dim"
  "target_dim"
  "HCLG"
  "gmm_mdl"
  "words"
  "log_prior"
  "train_data"
  "dev_data"
  "test_data"
  "dev_ref"
  "test_ref"
  "model_cfg"
  "state_dir"
  "state_csv"
  "decode_dev"
  "decode_test"
  "decoding_states"
  "min_active"
  "max_active"
  "max_mem"
  "beam"
  "lattice_beam"
)
unset_variables "${trial_dir_vars[@]}"
. "${trial_dir}/variables"
check_variables_are_set "${trial_dir_vars[@]}"

if [ ! -z "${torch_dir_mixin}" ]; then
  if [ "${freq_dim}" -ne "${freq_dim_mixin}" ]; then
    echo "\
Mix-in frequency dimension (${freq_dim_mixin}) does not match trained
frequency dimension (${freq_dim})" 2>&1
    exit 1
  fi
  dev_data="${dev_data_mixin}"
  test_data="${test_data_mixin}"
fi

if [ -z "${device}" ]; then
  if python -c 'import sys; import torch; sys.exit(0 if torch.cuda.is_available() else 1)'; then
    device=cuda
  else
    device=cpu
  fi
  echo "Inferred device: ${device}"
fi

if [ "${decoding_states}" = "best" ]; then
  decoding_states=
else # last
  decoding_states=--last
fi

for x in dev test; do
  decode_dir="$(eval echo "\${decode_${x}}")"
  ref_dir="$(eval echo "\${${x}_ref}")"
  pdfs_dir="${decode_dir}/pdfs"
  data_dir="$(eval echo "\${${x}_data}")"
  acoustic-model-forward-pdfs \
    --config "${model_cfg}" \
    --device "${device}" \
    --pdfs-dir "${pdfs_dir}" \
    "${log_prior}" "${data_dir}" \
    history "${state_dir}" "${state_csv}" ${decoding_states}
  write-torch-dir-to-table \
    -o bm \
    "${pdfs_dir}" "ark,scp:${pdfs_dir}/pdfs.ark,${pdfs_dir}/pdfs.scp"
  graph_dir="$(dirname "${HCLG}")"
  # FIXME(sdrobert): should invert acoustic scale
  latgen-faster-mapped \
    --acoustic-scale=0.1 \
    "--min-active=${min_active}" \
    "--max-active=${max_active}" \
    "--max-mem=${max_mem}" \
    "--beam=${beam}" \
    "--lattice-beam=${lattice_beam}" \
    "--word-symbol-table=${words}" \
    --allow-partial=true \
    "${gmm_mdl}" "${HCLG}" "scp:${pdfs_dir}/pdfs.scp" \
    "ark:|gzip -c > ${decode_dir}/lat.1.gz"
  if [ ! -f "${decode_dir}/../final.mdl" ]; then
    ln -s "${gmm_mdl}" "${decode_dir}/../final.mdl"
    trap "rm '${decode_dir}/../final.mdl'" EXIT
    delete_after=true
  else
    delete_after=false
  fi
  echo "1" > "${decode_dir}/num_jobs"
  local/score.sh "${ref_dir}" "$(dirname "${HCLG}")" "${decode_dir}"
  if $delete_after ; then
    rm "${decode_dir}/../final.mdl"
    trap 'echo -n' EXIT
  fi
done
